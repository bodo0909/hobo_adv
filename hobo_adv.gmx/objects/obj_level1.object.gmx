<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create the level

room_width = CELL_WIDTH * 45;
room_height = CELL_HEIGHT * 45;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height  = room_height div CELL_HEIGHT;

// Create the grid
grid = ds_grid_create(width, height);

// Fill the grid with the void
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// Randomize the world
randomize();

// Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

// Create the player
instance_create(cx*CELL_WIDTH+CELL_WIDTH/2, cy*CELL_HEIGHT+CELL_HEIGHT/2, obj_player);

// Give the controller a random direction (0-right, 1-up ,2-left ,3-down)
var c_dir = irandom(3);  //irandom returns random integer value 0-3

// The odds variable for changing direction
var odds = 1;

// Create the level using 1000 steps
repeat (1000) 
{
    // Place a floor tile at the controller position
    grid[# cx, cy] = FLOOR;  //ds_grid_set(grid, cx, cy, FLOOR); also works
    
    //Randomize the direction of the controller
    if (irandom(odds) == odds)
    {
        cdir  = irandom(3);
    }
    
    cdir =irandom(3);
    cdirangle = cdir*90;
    
    // Move the controller
    var xdir = lengthdir_x(1, cdirangle); //lengthdir calls angles
    var ydir = lengthdir_y(1, cdirangle);     
    
    cx += xdir;
    cy += ydir;
    
    // Make sure we dont move outside the grid - want walls on the edges
    
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2); 
}


// Add Walls

for (var yy = 1; yy &lt; height-1; yy++)
{
    for (var xx = 1; xx &lt; width-1; xx++)
    {
        if (grid[# xx, yy] == FLOOR)
        {
            //  Check for Walls
            if (grid[# xx+1, yy] != FLOOR) grid[# xx+1, yy] = WALL;
            if (grid[# xx-1, yy] != FLOOR) grid[# xx-1, yy] = WALL;
            if (grid[# xx, yy+1] != FLOOR) grid[# xx, yy+1] = WALL;
            if (grid[# xx, yy-1] != FLOOR) grid[# xx, yy-1] = WALL;
        }

    }
}

// Draw the level using the grid
for (var yy = 0; yy &lt; height; yy++)
{
    for (var xx = 0; xx &lt; width; xx++)
    {
        if (grid[# xx, yy] == FLOOR)
        {
            // Draw the floor
            tile_add(bg_pavement, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
        }    
    }
}

// Get tile size
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;


// Add the tiles

for (var yy = 0; yy &lt; height*2; yy++)
{
    for (var xx = 0; xx &lt; width*2; xx++)
    {
        if (grid[# xx div 2, yy div 2] == FLOOR)
        {
            // Get the tile x and y position
            var tx = xx*tw;
            var ty = yy*th;
            
            // Checks
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR; 
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltile, tw*4, th*1, tw, th, tx+tw, ty, -ty);
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltile, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltile, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltile, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltile, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltile, tw*3, th*1, tw, th, tx-tw, ty, -ty);
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltile, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltile, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltile, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltile, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltile, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltile, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltile, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(bg_walltile, tw*2, th*0, tw, th, tx, ty, -ty-tw);
                } else if (!bottom_left) {
                    tile_add(bg_walltile, tw*0, th*0, tw, th, tx, ty, -ty-tw);
                } else {
                    tile_add(bg_walltile, tw*1, th*0, tw, th, tx, ty, -ty-tw);
                }
            }

        }
    }
}

for (var yy = 1; yy &lt; height-1; yy++)
{
    for (var xx = 1; xx &lt; width-1; xx++)
    {
        if (grid[# xx, yy] == FLOOR)
        {
            var randlight=irandom(15)
            
            if randlight = 1
            {
            instance_create(xx*CELL_WIDTH, yy*CELL_HEIGHT, obj_light);
            }
        }
        
        if (grid[# xx, yy] == WALL)
        {
        instance_create(xx*CELL_WIDTH, yy*CELL_HEIGHT, obj_wall);
        }
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Restart the room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
